#!/usr/bin/env python3
"""
An√°lisis Exploratorio de Datos para Sistema Recomendador Multimodal
Trabajo Fin de M√°ster - H&M Personalized Fashion Recommendations

Este script realiza un an√°lisis exhaustivo de los datos incluyendo:
- An√°lisis de estructura de datos
- M√©tricas descriptivas
- An√°lisis temporal
- Patrones de comportamiento
- Visualizaciones comprehensivas
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
import os
from pathlib import Path
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.offline as pyo

# Configuraci√≥n
warnings.filterwarnings('ignore')
try:
    plt.style.use('seaborn-v0_8')
except OSError:
    plt.style.use('seaborn')
sns.set_palette("husl")
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', 100)

# Configurar directorio de trabajo
DATA_DIR = Path("dataset")
IMAGES_DIR = DATA_DIR / "images"

class FashionRecommenderEDA:
    """Clase principal para el an√°lisis exploratorio de datos"""
    
    def __init__(self):
        self.articles = None
        self.customers = None
        self.transactions = None
        self.image_stats = None
        
    def load_data(self):
        """Carga todos los datasets"""
        print("üîÑ Cargando datasets...")
        
        # Cargar articles.csv
        print("üì¶ Cargando metadatos de art√≠culos...")
        self.articles = pd.read_csv(DATA_DIR / "articles.csv")
        print(f"   ‚úÖ Articles: {self.articles.shape[0]:,} art√≠culos, {self.articles.shape[1]} columnas")
        
        # Cargar customers.csv
        print("üë• Cargando metadatos de clientes...")
        self.customers = pd.read_csv(DATA_DIR / "customers.csv")
        print(f"   ‚úÖ Customers: {self.customers.shape[0]:,} clientes, {self.customers.shape[1]} columnas")
        
        # Cargar transactions_train.csv (sample para an√°lisis r√°pido)
        print("üí≥ Cargando muestra de transacciones para an√°lisis...")
        # Usar una muestra para an√°lisis exploratorio inicial
        sample_size = 5000000  # 5M rows sample
        self.transactions = pd.read_csv(DATA_DIR / "transactions_train.csv", nrows=sample_size)
        print(f"   üìä Muestra cargada para an√°lisis exploratorio")
        print(f"   ‚úÖ Transactions: {self.transactions.shape[0]:,} transacciones, {self.transactions.shape[1]} columnas")
        
    def analyze_data_quality(self):
        """An√°lisis de calidad de datos"""
        print("\n" + "="*60)
        print("üìä AN√ÅLISIS DE CALIDAD DE DATOS")
        print("="*60)
        
        datasets = {
            'Articles': self.articles,
            'Customers': self.customers, 
            'Transactions': self.transactions
        }
        
        for name, df in datasets.items():
            print(f"\nüîç {name.upper()}:")
            print(f"   Forma: {df.shape}")
            print(f"   Memoria: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB")
            
            # Valores faltantes
            missing = df.isnull().sum()
            missing_pct = (missing / len(df)) * 100
            missing_df = pd.DataFrame({
                'Missing Count': missing,
                'Missing %': missing_pct
            }).sort_values('Missing %', ascending=False)
            
            print("   Valores faltantes:")
            for col, row in missing_df[missing_df['Missing Count'] > 0].iterrows():
                print(f"     {col}: {row['Missing Count']:,} ({row['Missing %']:.2f}%)")
            
            # Tipos de datos
            print("   Tipos de datos:")
            type_counts = df.dtypes.value_counts()
            for dtype, count in type_counts.items():
                print(f"     {dtype}: {count} columnas")
                
    def analyze_articles(self):
        """An√°lisis detallado de art√≠culos"""
        print("\n" + "="*60)
        print("üëï AN√ÅLISIS DE ART√çCULOS")
        print("="*60)
        
        # Informaci√≥n b√°sica
        print(f"\nüìà ESTAD√çSTICAS B√ÅSICAS:")
        print(f"   Total de art√≠culos: {len(self.articles):,}")
        print(f"   Art√≠culos √∫nicos: {self.articles['article_id'].nunique():,}")
        
        # An√°lisis por categor√≠as
        categorical_cols = self.articles.select_dtypes(include=['object']).columns
        
        print(f"\nüè∑Ô∏è AN√ÅLISIS POR CATEGOR√çAS:")
        for col in categorical_cols[:8]:  # Top 8 categor√≠as m√°s importantes
            if col != 'detail_desc':  # Evitar descripciones muy largas
                unique_count = self.articles[col].nunique()
                print(f"   {col}: {unique_count:,} valores √∫nicos")
                
                # Top 5 valores m√°s frecuentes
                top_values = self.articles[col].value_counts().head()
                print(f"     Top 5:")
                for val, count in top_values.items():
                    pct = (count / len(self.articles)) * 100
                    print(f"       {val}: {count:,} ({pct:.1f}%)")
                print()
        
        # An√°lisis de precios
        if 'price' in self.articles.columns:
            print(f"üí∞ AN√ÅLISIS DE PRECIOS:")
            price_stats = self.articles['price'].describe()
            print(f"   Estad√≠sticas de precios:")
            for stat, value in price_stats.items():
                print(f"     {stat.capitalize()}: {value:.2f}")
                
    def analyze_customers(self):
        """An√°lisis detallado de clientes"""
        print("\n" + "="*60)
        print("üë• AN√ÅLISIS DE CLIENTES")
        print("="*60)
        
        print(f"\nüìà ESTAD√çSTICAS B√ÅSICAS:")
        print(f"   Total de clientes: {len(self.customers):,}")
        print(f"   Clientes √∫nicos: {self.customers['customer_id'].nunique():,}")
        
        # An√°lisis demogr√°fico
        if 'age' in self.customers.columns:
            print(f"\nüéÇ AN√ÅLISIS DE EDAD:")
            age_stats = self.customers['age'].describe()
            for stat, value in age_stats.items():
                print(f"     {stat.capitalize()}: {value:.1f}")
                
            # Distribuci√≥n por grupos de edad
            self.customers['age_group'] = pd.cut(self.customers['age'], 
                                               bins=[0, 25, 35, 45, 55, 65, 100],
                                               labels=['18-25', '26-35', '36-45', '46-55', '56-65', '65+'])
            age_dist = self.customers['age_group'].value_counts().sort_index()
            print(f"     Distribuci√≥n por grupos:")
            for group, count in age_dist.items():
                pct = (count / len(self.customers)) * 100
                print(f"       {group}: {count:,} ({pct:.1f}%)")
        
        # An√°lisis por otras variables categ√≥ricas
        categorical_cols = self.customers.select_dtypes(include=['object']).columns
        for col in categorical_cols:
            if self.customers[col].nunique() < 20:  # Solo mostrar categor√≠as con pocos valores
                print(f"\nüè∑Ô∏è {col.upper()}:")
                dist = self.customers[col].value_counts()
                for val, count in dist.items():
                    pct = (count / len(self.customers)) * 100
                    print(f"     {val}: {count:,} ({pct:.1f}%)")
                    
    def analyze_transactions(self):
        """An√°lisis detallado de transacciones"""
        print("\n" + "="*60)
        print("üí≥ AN√ÅLISIS DE TRANSACCIONES")
        print("="*60)
        
        # Convertir fecha
        self.transactions['t_dat'] = pd.to_datetime(self.transactions['t_dat'])
        
        print(f"\nüìà ESTAD√çSTICAS B√ÅSICAS:")
        print(f"   Total de transacciones: {len(self.transactions):,}")
        print(f"   Clientes √∫nicos: {self.transactions['customer_id'].nunique():,}")
        print(f"   Art√≠culos √∫nicos: {self.transactions['article_id'].nunique():,}")
        
        # Per√≠odo de tiempo
        date_range = self.transactions['t_dat']
        print(f"   Per√≠odo: {date_range.min().date()} a {date_range.max().date()}")
        print(f"   Duraci√≥n: {(date_range.max() - date_range.min()).days} d√≠as")
        
        # An√°lisis de precio
        if 'price' in self.transactions.columns:
            print(f"\nüí∞ AN√ÅLISIS DE PRECIOS:")
            price_stats = self.transactions['price'].describe()
            for stat, value in price_stats.items():
                print(f"     {stat.capitalize()}: {value:.2f}")
                
            # Revenue total
            total_revenue = self.transactions['price'].sum()
            print(f"     Revenue total: {total_revenue:,.2f}")
            
        # An√°lisis temporal
        print(f"\nüìÖ AN√ÅLISIS TEMPORAL:")
        
        # Transacciones por mes
        monthly_trans = self.transactions.groupby(self.transactions['t_dat'].dt.to_period('M')).size()
        print(f"     Transacciones por mes (√∫ltimos 6):")
        for period, count in monthly_trans.tail(6).items():
            print(f"       {period}: {count:,}")
            
        # D√≠a de la semana
        weekday_trans = self.transactions.groupby(self.transactions['t_dat'].dt.day_name()).size()
        print(f"     Transacciones por d√≠a de la semana:")
        for day, count in weekday_trans.items():
            pct = (count / len(self.transactions)) * 100
            print(f"       {day}: {count:,} ({pct:.1f}%)")
            
    def analyze_customer_behavior(self):
        """An√°lisis de comportamiento de clientes"""
        print("\n" + "="*60)
        print("üõçÔ∏è AN√ÅLISIS DE COMPORTAMIENTO DE CLIENTES")
        print("="*60)
        
        # An√°lisis por cliente
        customer_stats = self.transactions.groupby('customer_id').agg({
            'article_id': 'count',  # N√∫mero de compras
            'price': ['sum', 'mean'],  # Gasto total y promedio
            't_dat': ['min', 'max']  # Primera y √∫ltima compra
        }).round(2)
        
        customer_stats.columns = ['num_purchases', 'total_spent', 'avg_price', 'first_purchase', 'last_purchase']
        
        # Calcular d√≠as activos
        customer_stats['days_active'] = (customer_stats['last_purchase'] - customer_stats['first_purchase']).dt.days
        
        print(f"\nüìä ESTAD√çSTICAS POR CLIENTE:")
        print("   N√∫mero de compras por cliente:")
        purchases_stats = customer_stats['num_purchases'].describe()
        for stat, value in purchases_stats.items():
            print(f"     {stat.capitalize()}: {value:.1f}")
            
        print("   Gasto total por cliente:")
        spending_stats = customer_stats['total_spent'].describe()
        for stat, value in spending_stats.items():
            print(f"     {stat.capitalize()}: {value:.2f}")
            
        # Segmentaci√≥n de clientes
        print(f"\nüéØ SEGMENTACI√ìN DE CLIENTES:")
        
        # Por frecuencia de compra
        customer_stats['frequency_segment'] = pd.cut(customer_stats['num_purchases'],
                                                   bins=[0, 1, 5, 20, float('inf')],
                                                   labels=['One-time', 'Occasional', 'Regular', 'Frequent'])
        
        freq_dist = customer_stats['frequency_segment'].value_counts()
        print("   Por frecuencia de compra:")
        for segment, count in freq_dist.items():
            pct = (count / len(customer_stats)) * 100
            print(f"     {segment}: {count:,} ({pct:.1f}%)")
            
        # Por valor monetario
        customer_stats['value_segment'] = pd.qcut(customer_stats['total_spent'],
                                                q=4,
                                                labels=['Low', 'Medium', 'High', 'Premium'])
        
        value_dist = customer_stats['value_segment'].value_counts()
        print("   Por valor monetario:")
        for segment, count in value_dist.items():
            pct = (count / len(customer_stats)) * 100
            print(f"     {segment}: {count:,} ({pct:.1f}%)")
            
        return customer_stats
        
    def analyze_product_popularity(self):
        """An√°lisis de popularidad de productos"""
        print("\n" + "="*60)
        print("üî• AN√ÅLISIS DE POPULARIDAD DE PRODUCTOS")
        print("="*60)
        
        # An√°lisis por art√≠culo
        product_stats = self.transactions.groupby('article_id').agg({
            'customer_id': 'nunique',  # Clientes √∫nicos
            'article_id': 'count',     # N√∫mero de ventas
            'price': ['sum', 'mean']   # Revenue y precio promedio
        }).round(2)
        
        product_stats.columns = ['unique_customers', 'total_sales', 'total_revenue', 'avg_price']
        
        print(f"\nüìä ESTAD√çSTICAS POR PRODUCTO:")
        print("   Ventas por producto:")
        sales_stats = product_stats['total_sales'].describe()
        for stat, value in sales_stats.items():
            print(f"     {stat.capitalize()}: {value:.1f}")
            
        # Top productos
        print(f"\nüèÜ TOP 10 PRODUCTOS M√ÅS VENDIDOS:")
        top_products = product_stats.sort_values('total_sales', ascending=False).head(10)
        for i, (article_id, row) in enumerate(top_products.iterrows(), 1):
            print(f"   {i:2d}. Art√≠culo {article_id}: {row['total_sales']:,} ventas, {row['unique_customers']:,} clientes")
            
        print(f"\nüí∞ TOP 10 PRODUCTOS POR REVENUE:")
        top_revenue = product_stats.sort_values('total_revenue', ascending=False).head(10)
        for i, (article_id, row) in enumerate(top_revenue.iterrows(), 1):
            print(f"   {i:2d}. Art√≠culo {article_id}: ‚Ç¨{row['total_revenue']:,.2f}, {row['total_sales']:,} ventas")
            
        return product_stats
        
    def analyze_images(self):
        """An√°lisis de disponibilidad de im√°genes"""
        print("\n" + "="*60)
        print("üñºÔ∏è AN√ÅLISIS DE IM√ÅGENES")
        print("="*60)
        
        # Contar im√°genes por directorio
        image_count = 0
        dir_stats = {}
        
        print("üîç Explorando directorios de im√°genes...")
        
        for subdir in IMAGES_DIR.iterdir():
            if subdir.is_dir():
                images_in_dir = len(list(subdir.glob("*.jpg")))
                dir_stats[subdir.name] = images_in_dir
                image_count += images_in_dir
                
        print(f"\nüìä ESTAD√çSTICAS DE IM√ÅGENES:")
        print(f"   Total de im√°genes: {image_count:,}")
        print(f"   Directorios: {len(dir_stats)}")
        print(f"   Promedio por directorio: {image_count / len(dir_stats):.1f}")
        
        # Art√≠culos con/sin imagen (muestra para estimaci√≥n)
        articles_with_images = set()
        sample_articles = self.articles['article_id'].sample(min(10000, len(self.articles)))  # Muestra de 10k art√≠culos
        for article_id in sample_articles:
            article_str = str(article_id).zfill(10)
            subdir = article_str[:3]
            image_path = IMAGES_DIR / subdir / f"{article_str}.jpg"
            if image_path.exists():
                articles_with_images.add(article_id)
                
        # Extrapolar resultado a toda la poblaci√≥n
        sample_coverage = len(articles_with_images) / len(sample_articles) * 100
        estimated_articles_with_images = int(len(self.articles) * sample_coverage / 100)
                
        print(f"\nüìà COBERTURA DE IM√ÅGENES (ESTIMACI√ìN):")
        print(f"   Muestra analizada: {len(sample_articles):,} art√≠culos")
        print(f"   Art√≠culos con imagen (muestra): {len(articles_with_images):,} ({sample_coverage:.1f}%)")
        print(f"   Estimaci√≥n total con imagen: {estimated_articles_with_images:,}")
        print(f"   Estimaci√≥n sin imagen: {len(self.articles) - estimated_articles_with_images:,}")
        
        self.image_stats = {
            'total_images': image_count,
            'articles_with_images': estimated_articles_with_images,
            'coverage_pct': sample_coverage
        }
        
        return dir_stats
        
    def create_visualizations(self):
        """Crear visualizaciones comprehensivas"""
        print("\n" + "="*60)
        print("üìà CREANDO VISUALIZACIONES")
        print("="*60)
        
        # Configurar subplot
        fig = make_subplots(
            rows=4, cols=2,
            subplot_titles=[
                'Transacciones por Mes',
                'Distribuci√≥n de Precios',
                'Top 15 Categor√≠as de Productos',
                'Distribuci√≥n de Edad de Clientes',
                'Transacciones por D√≠a de la Semana',
                'Segmentaci√≥n de Clientes por Frecuencia',
                'Revenue Mensual',
                'Cobertura de Im√°genes'
            ],
            specs=[[{"secondary_y": False}, {"secondary_y": False}],
                   [{"secondary_y": False}, {"secondary_y": False}],
                   [{"secondary_y": False}, {"type": "pie"}],
                   [{"secondary_y": False}, {"type": "pie"}]]
        )
        
        # 1. Transacciones por mes
        monthly_trans = self.transactions.groupby(self.transactions['t_dat'].dt.to_period('M')).size()
        fig.add_trace(
            go.Scatter(x=[str(p) for p in monthly_trans.index], y=monthly_trans.values,
                      mode='lines+markers', name='Transacciones'),
            row=1, col=1
        )
        
        # 2. Distribuci√≥n de precios
        fig.add_trace(
            go.Histogram(x=self.transactions['price'], nbinsx=50, name='Precios'),
            row=1, col=2
        )
        
        # 3. Top categor√≠as (usando product_group_name si existe)
        if 'product_group_name' in self.articles.columns:
            top_categories = self.articles['product_group_name'].value_counts().head(15)
            fig.add_trace(
                go.Bar(x=top_categories.values, y=top_categories.index, 
                      orientation='h', name='Categor√≠as'),
                row=2, col=1
            )
        
        # 4. Distribuci√≥n de edad
        if 'age' in self.customers.columns:
            fig.add_trace(
                go.Histogram(x=self.customers['age'], nbinsx=30, name='Edad'),
                row=2, col=2
            )
        
        # 5. Transacciones por d√≠a de la semana
        weekday_trans = self.transactions.groupby(self.transactions['t_dat'].dt.day_name()).size()
        days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        weekday_ordered = weekday_trans.reindex(days_order)
        
        fig.add_trace(
            go.Bar(x=days_order, y=weekday_ordered.values, name='D√≠a semana'),
            row=3, col=1
        )
        
        # 6. Segmentaci√≥n por frecuencia
        customer_stats = self.transactions.groupby('customer_id').size()
        freq_segments = pd.cut(customer_stats, bins=[0, 1, 5, 20, float('inf')],
                              labels=['One-time', 'Occasional', 'Regular', 'Frequent'])
        freq_dist = freq_segments.value_counts()
        
        fig.add_trace(
            go.Pie(labels=freq_dist.index, values=freq_dist.values, name='Segmentaci√≥n'),
            row=3, col=2
        )
        
        # 7. Revenue mensual
        monthly_revenue = self.transactions.groupby(self.transactions['t_dat'].dt.to_period('M'))['price'].sum()
        fig.add_trace(
            go.Scatter(x=[str(p) for p in monthly_revenue.index], y=monthly_revenue.values,
                      mode='lines+markers', name='Revenue'),
            row=4, col=1
        )
        
        # 8. Cobertura de im√°genes
        if self.image_stats:
            coverage_data = ['Con imagen', 'Sin imagen']
            coverage_values = [self.image_stats['articles_with_images'], 
                             len(self.articles) - self.image_stats['articles_with_images']]
            
            fig.add_trace(
                go.Pie(labels=coverage_data, values=coverage_values, name='Im√°genes'),
                row=4, col=2
            )
        
        # Actualizar layout
        fig.update_layout(
            height=1600,
            title_text="Dashboard de An√°lisis Exploratorio - Sistema Recomendador H&M",
            showlegend=False
        )
        
        # Guardar visualizaci√≥n
        fig.write_html("fashion_recommender_eda_dashboard.html")
        print("   ‚úÖ Dashboard guardado como 'fashion_recommender_eda_dashboard.html'")
        
        # Crear visualizaciones adicionales con matplotlib
        self._create_matplotlib_plots()
        
    def _create_matplotlib_plots(self):
        """Crear plots adicionales con matplotlib"""
        
        # 1. Heatmap de correlaciones (si hay datos num√©ricos suficientes)
        plt.figure(figsize=(15, 10))
        
        # Subplot 1: Evoluci√≥n temporal detallada
        plt.subplot(2, 3, 1)
        daily_trans = self.transactions.groupby('t_dat').size()
        daily_trans.plot(kind='line', alpha=0.7)
        plt.title('Evoluci√≥n Diaria de Transacciones')
        plt.xticks(rotation=45)
        plt.ylabel('N√∫mero de Transacciones')
        
        # Subplot 2: Distribuci√≥n logar√≠tmica de precios
        plt.subplot(2, 3, 2)
        plt.hist(np.log1p(self.transactions['price']), bins=50, alpha=0.7, edgecolor='black')
        plt.title('Distribuci√≥n Logar√≠tmica de Precios')
        plt.xlabel('Log(Precio + 1)')
        plt.ylabel('Frecuencia')
        
        # Subplot 3: Top productos m√°s vendidos
        plt.subplot(2, 3, 3)
        product_sales = self.transactions['article_id'].value_counts().head(20)
        product_sales.plot(kind='bar')
        plt.title('Top 20 Productos M√°s Vendidos')
        plt.xlabel('Article ID')
        plt.ylabel('Ventas')
        plt.xticks(rotation=90)
        
        # Subplot 4: Distribuci√≥n de compras por cliente
        plt.subplot(2, 3, 4)
        customer_purchases = self.transactions.groupby('customer_id').size()
        plt.hist(customer_purchases, bins=50, alpha=0.7, edgecolor='black')
        plt.title('Distribuci√≥n de Compras por Cliente')
        plt.xlabel('N√∫mero de Compras')
        plt.ylabel('N√∫mero de Clientes')
        plt.yscale('log')
        
        # Subplot 5: An√°lisis estacional
        plt.subplot(2, 3, 5)
        seasonal_trans = self.transactions.groupby(self.transactions['t_dat'].dt.month).size()
        months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
                 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']
        plt.bar(range(1, 13), seasonal_trans.reindex(range(1, 13), fill_value=0))
        plt.title('Estacionalidad de Compras')
        plt.xlabel('Mes')
        plt.ylabel('Transacciones')
        plt.xticks(range(1, 13), months, rotation=45)
        
        # Subplot 6: Distribuci√≥n de revenue por transacci√≥n
        plt.subplot(2, 3, 6)
        plt.boxplot(self.transactions['price'])
        plt.title('Distribuci√≥n de Precios (Boxplot)')
        plt.ylabel('Precio')
        
        plt.tight_layout()
        plt.savefig('fashion_recommender_detailed_analysis.png', dpi=300, bbox_inches='tight')
        print("   ‚úÖ Gr√°ficos detallados guardados como 'fashion_recommender_detailed_analysis.png'")
        
    def generate_summary_report(self):
        """Generar reporte resumen con insights clave"""
        print("\n" + "="*80)
        print("üìã REPORTE RESUMEN - INSIGHTS CLAVE PARA SISTEMA RECOMENDADOR")
        print("="*80)
        
        # M√©tricas clave del dataset
        print(f"\nüéØ M√âTRICAS CLAVE DEL DATASET:")
        print(f"   ‚Ä¢ Total de transacciones: {len(self.transactions):,}")
        print(f"   ‚Ä¢ Clientes √∫nicos: {self.transactions['customer_id'].nunique():,}")
        print(f"   ‚Ä¢ Productos √∫nicos: {self.transactions['article_id'].nunique():,}")
        print(f"   ‚Ä¢ Revenue total: ‚Ç¨{self.transactions['price'].sum():,.2f}")
        print(f"   ‚Ä¢ Per√≠odo de datos: {(self.transactions['t_dat'].max() - self.transactions['t_dat'].min()).days} d√≠as")
        
        if self.image_stats:
            print(f"   ‚Ä¢ Cobertura de im√°genes: {self.image_stats['coverage_pct']:.1f}%")
        
        # Insights de comportamiento
        print(f"\nüîç INSIGHTS DE COMPORTAMIENTO:")
        
        # An√°lisis de clientes
        customer_purchases = self.transactions.groupby('customer_id').size()
        repeat_customers = (customer_purchases > 1).sum()
        repeat_rate = repeat_customers / len(customer_purchases) * 100
        
        print(f"   ‚Ä¢ Tasa de clientes recurrentes: {repeat_rate:.1f}%")
        print(f"   ‚Ä¢ Promedio de compras por cliente: {customer_purchases.mean():.1f}")
        print(f"   ‚Ä¢ Ticket promedio: ‚Ç¨{self.transactions['price'].mean():.2f}")
        
        # An√°lisis de productos
        product_sales = self.transactions['article_id'].value_counts()
        products_80_percent = (product_sales.cumsum() / product_sales.sum() <= 0.8).sum()
        
        print(f"   ‚Ä¢ Productos que generan 80% de ventas: {products_80_percent:,} ({products_80_percent/len(product_sales)*100:.1f}%)")
        print(f"   ‚Ä¢ Productos con una sola venta: {(product_sales == 1).sum():,}")
        
        # Recomendaciones para el sistema recomendador
        print(f"\nüí° RECOMENDACIONES PARA EL SISTEMA RECOMENDADOR:")
        print(f"   üéØ ESTRATEGIAS DE RECOMENDACI√ìN:")
        print(f"      ‚Ä¢ Implementar filtrado colaborativo para clientes recurrentes ({repeat_rate:.1f}%)")
        print(f"      ‚Ä¢ Usar filtrado basado en contenido para productos con pocas interacciones")
        print(f"      ‚Ä¢ Aprovechar datos multimodales (im√°genes) para {self.image_stats['coverage_pct']:.1f}% de productos")
        print(f"      ‚Ä¢ Considerar estacionalidad en recomendaciones")
        
        print(f"\n   üìä CONSIDERACIONES T√âCNICAS:")
        print(f"      ‚Ä¢ Manejar sparsity: muchos productos tienen pocas ventas")
        print(f"      ‚Ä¢ Implementar cold-start para nuevos productos/usuarios")
        print(f"      ‚Ä¢ Usar t√©cnicas de ensemble para combinar diferentes enfoques")
        print(f"      ‚Ä¢ Optimizar para diversidad vs precisi√≥n")
        
        print(f"\n   üîß FEATURES RECOMENDADAS:")
        print(f"      ‚Ä¢ Historial de compras del usuario")
        print(f"      ‚Ä¢ Similitud visual entre productos (CNN)")
        print(f"      ‚Ä¢ Categor√≠as y atributos de productos")
        print(f"      ‚Ä¢ Patrones temporales y estacionales")
        print(f"      ‚Ä¢ Popularidad y tendencias de productos")
        
    def run_complete_analysis(self):
        """Ejecutar an√°lisis completo"""
        print("üöÄ INICIANDO AN√ÅLISIS EXPLORATORIO COMPLETO")
        print("="*80)
        
        # Cargar datos
        self.load_data()
        
        # An√°lisis de calidad
        self.analyze_data_quality()
        
        # An√°lisis espec√≠ficos
        self.analyze_articles()
        self.analyze_customers()
        self.analyze_transactions()
        self.analyze_customer_behavior()
        self.analyze_product_popularity()
        self.analyze_images()
        
        # Visualizaciones
        self.create_visualizations()
        
        # Reporte final
        self.generate_summary_report()
        
        print(f"\nüéâ AN√ÅLISIS COMPLETADO EXITOSAMENTE")
        print(f"   Archivos generados:")
        print(f"   ‚Ä¢ fashion_recommender_eda_dashboard.html")
        print(f"   ‚Ä¢ fashion_recommender_detailed_analysis.png")

if __name__ == "__main__":
    # Ejecutar an√°lisis completo
    eda = FashionRecommenderEDA()
    eda.run_complete_analysis()